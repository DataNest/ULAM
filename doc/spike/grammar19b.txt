<PROGRAM> := 'ulam' + <BLOCK> + <EOF>
<BLOCK> := '{' + <STATEMENTS> + '}'

<STATEMENTS> := 0 | <STATEMENT> + <STATEMENTS>
<STATEMENT> := <SIMPLE_STATEMENT> | <CONTROL_STATEMENT> | <BLOCK>  | <FUNC_DEF>
<SIMPLE_STATEMENT> := ( 0 | <DECL> | <FUNC_DECL> | <FUNC_CALL> | <ASSIGN_EXPRESSION> ) + ';'

<DECL> := <TYPE> + <VAR_DECLS>
<VAR_DECLS> := <VAR_DECL> | <VAR_DECL> + ',' + <VAR_DECLS>
<VAR_DECL> := <LVAL_EXPRESSION>

<TYPE> := 'Int' | 'Bool' | 'Float'

<FUNC_DEF> := <FUNC_DECL> + <BLOCK>
<FUNC_DECL> := <TYPE> + <IDENT> + '(' + <FUNC_ARGS> + ')'
<FUNC_ARGS> := 0 | <FUNC_ARG> | <FUNC_ARG> + ',' + <FUNC_ARGS>
<FUNC_ARG>  := <TYPE> + <VAR_DECL> | <FUNC_DECL>  

<FUNC_CALL> := <IDENT> + '(' + <ARGS> + ')'
<ARGS> := 0 | <ARG> | <ARG> + ',' + <ARGS>
<ARG>  := <ASSIGN_EXPRESSION>


<CONTROL_STATEMENT> := <IF_STATEMENT> | <WHILE_STATEMENT>

<IF_STATEMENT> := 'if' + '(' + <ASSIGN_EXPRESSION> + ') + <STATEMENT> + <OPT_ELSE_STATEMENT>
<OPT_ELSE_STATEMENT> := 0 | 'else' + <STATEMENT>

<WHILE_STATEMENT> := 'while' + '(' + <ASSIGN_EXPRESSION> + ')' + <STATEMENT>

<ASSIGN_EXPRESSION> := <EXPRESSION> | <LVAL_EXPRESSION> + <ASSIGN_OP> + <ASSIGN_EXPRESSION>
<ASSIGN_OP> := '=' | '+=' | '-=' | '*=' | '&=' | '|=' | '^='

<LVAL_EXPRESSION> := <IDENT> | <IDENT> + '[' + <EXPRESSION> + ']' | <FUNC_CALL>

<EXPRESSION> := <TERM> | <EXPRESSION> <ADDOP> <TERM>
<ADDOP> := '+' | '-' | '&' | '|' | '^'

<TERM> := <FACTOR> | <TERM> <MULOP> <FACTOR>
<MULOP> := '*' | '/'
<FACTOR> := <LVAL_EXPRESSION> | <NUMBER> | '(' + <ASSIGN_EXPRESSION> + ')' | <UNOP> + <FACTOR>
<UNOP> := '-' | '+' | '!'
