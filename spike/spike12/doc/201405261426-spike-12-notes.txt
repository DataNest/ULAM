Uneditted quick reactions..

 - Tar file has lots of ~'s in it.  Consider having a 'tar' target in
   the makefile that depends on 'clean' or 'realclean' as appropriate.

 - Urgh, duplicated files... Which SourceStream.cpp, for example,
   should I look at, and how would I have known that?

   = Looking in /s/ for now.  Seems to be less ~'s in there..

----
SourceStream.h:

 - Be good to start using doxygen-style class and method comments, at
   least for public members.  They are block-style comments that begin
   with '/**' and end with '*/', like:

  /**
      Return the next byte of the current file in the SourceStream, as a
      non-negative int.  If EOF is encountered on the current file, it is
      automatically closed and 'popped', and the next byte of the most
      recently suspended file is returned instead, if any remain.  If after
      possibly multiple consecutive 'pops', no further 'push'ed files
      remain, read() returns -1 instead.  If some other I/O problem occurs,
      read() returns a negative number less than -1 according to some
      scheme you devise.
  */
  int read();

  or whatever.  (I realize that's a spec extract there, rather than
  'official' doc, but still it's something.)

 - Consistent member naming is worth it to reduce surprise.  So 'FM'
   isn't great, 'm_fm' better, or 'm_fileManager' probably better
   still.

----
SourceStream.cpp

 - Does m_openFilesStack.pop() return anything?  Checking..  No it
   doesn't.. OK.

 - Sad to have such similar close/pop/delete code sequences in
   ~SourceStream and read().  Vs something like

   //.h
   private:
     bool discardTop() ;

   //.cpp
   bool SourceStream::discardTop() {
     if (m_openFilesStack.empty()) return false;
     File * fp = m_openFilesStack.top();
     m_openFilesStack.pop();
     fp->close();
     delete fp;
     return true;
   }

   which could then be used in both places.


 - 'Battle damage' comments like
	    //fclose(m_openFilesStack.top());
	    fp->close();

   make the code harder to review.

 - Couldn't the 'if' at SourceStream.cpp:48 be eliminated?  Feels like
   an unnecessary special-case; cleaner without it.

----
FileManager.h

 - :16 The '= 0' isn't strictly needed since enum defaults to 0 for
   first element anyway.  Would only consider using it if you are
   going to use the Mode values numerically somewhere, rather than
   only categorically.  (grepping for Mode uses to check..  Ah,
   FileManagerStdio has an array indexed by enum Mode..  OK.  (But:
   Watch out for fopen mode "r+".  By itself, "r+" does not do what
   EXTEND is documented to do))

 - :22 make the dtor virtual.

 - /** doxygen style comments */

----
FileManager.cpp

 - Looks fine

----
FileManagerString.h

 - [Small point] Ideally, overriding methods in subclasses (e.g.,
   FileManagerString::open) would not need any or much documentation
   of their own, because the base class doc (on FileManager::open)
   would have 'said everything that needs to be said'.  Not always
   true in practice, but a goal..  Here, the fact that FMS::open
   returns a FileString would need to be docced, since that couldn't
   be inferred from the FM::open doc.

 - :44 'thbytes'

 - m_dirPath, m_pathToContents

----
FileManagerString.cpp

 - :16 battle damage hinders code reviews

 - :58 Parens in 'case (FOO):' looks odd to my eye (they make a
   frownie face).  Not illegal, but it's hard to imagine a case where
   they'd really be needed.

 - :82 prefer an if for a single case..

 - :96 BUG: This 'if' will fail if there has been some recent previous
   I/O error left errno non-zero!  Make a local variable for your
   status, check that variable here, and set errno from that, if
   needed, at the end!

 - :121 sad having two delete's.
     bool ret = (fs->write( data.c_str()) == 0);   // write(const char *) needs doc on return value!
     fs->close();
     delete fs;
     return ret;

 - :146 PathToContents[fullpath].size() == 0 seems like an odd
   condition here?  Does that really mean file does not exist?  Why is
   it illegal to 'get()' a file that happens to have zero-length content?

----
File.h

 - virtual dtor

 - Prefer non-virtual 'int write(const char * data)'.

 - Is the File::close doc right?  Does it return 0 only once on a
   given File, and then start returning something negative if called
   again on the same File?

----
File.cpp

 - Add implementation of int write(const char * data)..


----
FileString.h

 - (doc on overriding methods..)

 - 'int write(const char * data)' goes away

 - data member m_names..

 - Cleaning up around the dtor invoking close issue..

 - So read() returns EOF if a FileString is not open for READ?  I
   guess that's indeed a scheme one can devise..

 - :31 Watch out!  Latent bug warning!  'int i' is signed.
   std::string uses a 'char' for data storage, which is also signed.
   So 'i = FStr[at++];' is going to sign extend!  Consider a test case
   involving a string like "foo\377oops".

 - :57 is File::write supposed to return the length, like
   FileString::write is doing?  How does FileStdio::write achieve that
   effect?  (No, FileStdio is returning c or EOF+errno.)  But, wait..
   spike12.txt says write(int) is supposed to return 0 if successful.
   So both of these write implementations are returning the wrong
   thing (but, different wrong things)..

 - FileString::write(const char *) goes away.

 - :85 Looks like close() is returning the same thing every time it's
   called.  (Not saying that's bad, but seems inconsistent with doc.
   Maybe doc should be changed.)



========
/f/

 - Why is FileManagerString.h in here??


----
FileManagerStdio.h

 - member names

----
FileManagerStdio.cpp

 - Mode "r+" issue.

----
FileStdio.h

 - member names

----
FileStdio.cpp

 - Bad comment on ~FileStdio

 - int FileStdio::write(const char * data) goes away

 - :46 Unclear that returning fclose's return value is spec.  But
   probably the spec should be reconsidered in this area.

