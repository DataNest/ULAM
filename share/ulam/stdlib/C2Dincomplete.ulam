//{
  typedef Unsigned(3) Dir;

  Coord x;
  Coord y;

  Void init(Int ax, Int ay) {
    init((Coord) ax, (Coord) ay);
  }

  Void init(Self c) {
    init(c.x, c.y);
  }

  Void init(Coord ax, Coord ay) {
    x = ax;
    y = ay;
  }

  Int getX() { return (Int) x; }
  Int getY() { return (Int) y; }

  Void setX(Int ax) { x = (Coord) ax; }
  Void setY(Int ay) { y = (Coord) ay; }

  Self make(Int x, Int y)
  {
    Self ret;
    ret.init(x,y);
    return ret;
  }

  Bool equals(Self other) {
    return x == other.x && y == other.y;
  }

  Int dot(Self other) {
    return x * other.x + y * other.y;
  }

  Self add(Self other) {
    return make((Coord) (x + other.x), (Coord) (y + other.y));
  }

  Self subtract(Self other) {
    return make((Coord) (x - other.x), (Coord) (y - other.y));
  }

  Self negate() {
    return make((Coord) -(Int) x, (Coord) -(Int) y);
  }

  /**
     Return the von Neumann neighbor in the direction d
   */
  Self neighbor(Dir d) {
    if (d==0) return make( 0, 1);
    if (d==1) return make( 1, 1);
    if (d==2) return make( 1, 0);
    if (d==3) return make( 1,-1);
    if (d==4) return make( 0,-1);
    if (d==5) return make(-1,-1);
    if (d==6) return make(-1, 0);
    /* d==7*/ return make(-1, 1);
  }

  /**
     Return the event window point at distance 4 in the direction d.
   */
  Self corner(Dir d) {
    if (d==0) return make( 0, 4);
    if (d==1) return make( 2, 2);
    if (d==2) return make( 4, 0);
    if (d==3) return make( 2,-2);
    if (d==4) return make( 0,-4);
    if (d==5) return make(-2,-2);
    if (d==6) return make(-4, 0);
    /* d==7*/ return make(-2, 2);
  }

  Unsigned length() {
    Self origin;
    return manhattanDistance(origin);
  }

  Bool isOrigin() {
    return x == 0 && y == 0;
  }

  Unsigned manhattanDistance(Self other) {
    Int dx = x - other.x, dy = y - other.y;
    if (dx < 0) dx = -dx;
    if (dy < 0) dy = -dy;
    return (Unsigned) (dx + dy);
  }
//}
