## -*- mode:ulam -*-
#=t3248_test_compiler_elementandquark_caarray_isparse
#!
Exit status: 0
Ue_EventWindowTest { EventWindow ew();  Int(32) test() {  Atom(96) a;  EventWindowTest ewt;  ew 0 cast [] ewt cast = a ew 0 cast [] = a EventWindowTest is cond 0 cast return if 1 cast return } }
Uq_EventWindow { <NOMAIN> }
#>EventWindowTest.ulam
##      // 'a has System' doesn't appy to eval because atoms have no class declarations; but testable for gencode
ulam 1;
use EventWindow;
element EventWindowTest {
EventWindow ew;
 Int test() {
    Atom a;
EventWindowTest ewt;
 ew[0] = ewt;
   a = ew[0];  // This is me!
    if (a is EventWindowTest)
      return 0;
    return 1;
  }
}

#:EventWindow.ulam
ulam 1;
quark EventWindow {
  Atom aref(Int index) native;
  Void aset(Int index, Atom val) native;
}
##      // playing with errors..
##      //bool rtn2 = fms->add("EventWindow.ulam", "ulam 1;\nquark EventWindow {\n  Atom aref(Int index) native;\n  Void aset(Int index, Int val) native;\n}\n");
##      //bool rtn2 = fms->add("EventWindow.ulam", "ulam 1;\nquark EventWindow {\n  Atom aref(Int index) native;\n  Void aSet(Int index, Atom val) native;\n}\n");
#.