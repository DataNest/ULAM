## -*- mode:ulam -*-
#=t3305_test_compiler_multiplestmts_binaryops
#!
##      /* gen code output:
##	 Int Arg: 2
##	 Int Arg: 0
##	 Int Arg: 0
##	 Int Arg: 1
##	 Int Arg: 1
##      */
##
Exit status: 1
Ue_A { System s();  Bool(7) spb(false);  Int(32) c(0);  Int(32) d(1);  Int(32) test() {  Int(32) a;  Int(32) b;  a b c 1 cast = = = c a b +b = s ( c )print . c c a -b b -b = s ( c )print . a c b * = s ( a )print . b b b / = s ( b )print . d a b +b c +b = s ( d )print . a b +b c +b return } }
Uq_System { <NOMAIN> }
##      // multiple statements, each of the binary ops, where all idents == 1
##      // when using the same variable for each result, the final value is returned throughout.
##      // to see intermediate results use different variables:
#>A.ulam
use System;
element A{
System s;
Bool(7) spb;
Int c, d;
 Int test() {
 Int a, b;
 a = b = c = 1;
 c = a + b;
s.print(c);
 c = c - a - b;
 s.print(c);
a = c * b;
s.print(a);
 b = b / b;
 s.print(b);
d = (a + b + c);
s.print(d);
 return (a + b + c);
 }
 }
##      //bool rtn1 = fms->add("A.ulam","element A{\nInt c, d;\n Int test() {\n Int a, b;\n a = b = c = 1;\n c = a + b;\n c = c - a - b;\n a = c * b;\n b = b / b;\n d = (a + b + c);\n return (a + b + c);\n }\n }\n");

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.
