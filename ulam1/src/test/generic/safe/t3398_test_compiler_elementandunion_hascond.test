## -*- mode:ulam -*-
#=t3398_test_compiler_elementandunion_hascond
#!
##
##      /* gen code output: (correct answer unlike eval exit status)
##	 Int Arg: 1
##      */
Exit status: 1
Ue_Eltypo { System s();  Typo(1) t( constant Int(32) a = 1;  Unsigned(1) u(0);  Int(2) i(0); );  Int(32) test() {  Eltypo el;  el Typo(1) has cond { s ( t 1 . )print . t 1 . return } if 2u cast return } }
Uq_Typo { constant Int(32) a = NONREADYCONST;  Unsigned(UNKNOWN) u(0);  Int(UNKNOWN) i(0);  <NOMAIN> }
Uq_System { <NOMAIN> }
##
##      //uses union instead of quark:
##
#>Eltypo.ulam
ulam 1;
use Typo;
use System;
 element Eltypo {
 System s;
 Typo(1) t;
 Int test(){
     Eltypo el;
     if(el has Typo(1)){
     s.print(t.a);
     return t.a;
     }
      return t.sizeof;
 }
}

#:Typo.ulam
ulam 1;
union Typo(Int a) {
      Unsigned(a) u;
      Int(a+1) i;
 }

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.
