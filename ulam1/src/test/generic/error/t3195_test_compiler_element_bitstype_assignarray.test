## -*- mode:ulam -*-
#=t3195_test_compiler_element_bitstype_assignarray
#!
##
##./Foo.ulam:11:18: ERROR: Incompatible types for binary operator+ : Bits(3), Bits(3); Suggest casting to a numeric type first.
##./Foo.ulam:12:6: ERROR: Use a comparison operator to convert Bits(3)[3] to Bool(3)[3] for operator=.
##./Foo.ulam:19:2: ERROR: Use explicit cast to return Bool(3) as Int(32).
##
Exit status: 3
Ue_Foo { Bits(3) m_i[3](1,2,3);  Bits(3) m_b[3](1,2,3);  Int(32) test() {  m_i 0 [] 1 cast = m_i 1 [] 2 cast = m_i 2 [] m_i 0 [] cast m_i 1 [] cast +b cast = m_b m_i = m_b 2 [] cast return } }
#>Foo.ulam
ulam 1;
use System;
element Foo {
System s;
Bool sp;
 Bits(3) m_i[3];
 Bool(3) m_b[3];
 Int test() {
 m_i[0] = 1;
 m_i[1] = 2;
 m_i[2] = m_i[0] + m_i[1];
 m_b = m_i;
s.print((Unsigned) m_i[0]);
s.print((Unsigned) m_i[1]);
s.print((Unsigned) m_i[2]);
s.print(m_b[0]);
s.print(m_b[1]);
s.print(m_b[2]);
 return m_b[2];
 }
 }

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.
