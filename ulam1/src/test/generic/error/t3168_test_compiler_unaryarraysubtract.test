## -*- mode:ulam -*-
#=t3168_test_compiler_unaryarraysubtract
#!
##./A.ulam:10:10: ERROR: Incompatible (nonscalar) types Unary(3)[2] and Unary(3)[2] for binary operator- ; Suggest writing a loop.
##./A.ulam:12:6: ERROR: Use explicit cast to convert Unsigned(3) to Unary(3) for operator=.
##
Ue_A { typedef Unary(3) Mu[2];  Unary(3) a[2](2,1);  Unary(3) b[2](3,1);  Unary(3) c[2](0,0);  Unary(3) x(2);  Unary(3) y(3);  Unary(3) z(0);  Int(32) test() {  a 0 [] 2 cast = a 1 [] 1 cast = b 0 [] 3 cast = b 1 [] 1 cast = c a b -b = x 2 cast = y 3 cast = z x cast y cast -b cast = c 0 [] cast return } }
Exit status:
#>A.ulam
element A {
 typedef Unary(3) Mu[2];
 Mu a, b, c;
 Unary(3) x, y, z;
 Int test() {
   a[0] = 2;
   a[1] = 1;
   b[0] = 3;
   b[1] = 1;
   c = a - b;
   x = 2; y = 3;
   z = x - y;
   return c[0];
 }
}
##
##      //exercises, append in NodeBinaryOpAdd;
##      //
##      //bool rtn1 = fms->add("A.ulam","element A { typedef Unary(3) Mu[2]; Mu a, b, c; use test;  a[0] = 2; a[1] = 1; b[0] = 3; b[1] = 1; c = a - b; return c[0]; } }");
##
##      // does it matter if they are scalars or arrays operated on?
##
#.
